package com.pingan.mina.server;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.charset.Charset;

import org.apache.mina.core.service.IoAcceptor;
import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.codec.textline.TextLineCodecFactory;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.pingan.mina.handler.ServerHandler;

public class MinaServer {

	private static final Logger logger = LoggerFactory.getLogger(MinaServer.class);

	private static final String host = "127.0.0.1";

	private static final int port = 8089;

	public static void main(String[] args) {

		IoAcceptor acceptor = new NioSocketAcceptor();
		acceptor.getFilterChain().addLast("logger", new LoggingFilter());
		acceptor.getFilterChain().addLast("codec", new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName("UTF-8"))));

		acceptor.setHandler(new ServerHandler());
		acceptor.getSessionConfig().setReadBufferSize(2048);
		acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, 10);

		try {
			acceptor.bind(new InetSocketAddress(host, port));
		} catch (IOException e) {
			logger.error("-- minaServer error --", e);
		}

	}

}



package com.pingan.mina.handler;

import java.util.concurrent.ConcurrentHashMap;

import org.apache.mina.core.service.IoHandlerAdapter;
import org.apache.mina.core.session.IoSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ServerHandler extends IoHandlerAdapter {

	private static final Logger log = LoggerFactory.getLogger(ServerHandler.class);

	private static ConcurrentHashMap<Long, IoSession> sessionMap = new ConcurrentHashMap<Long, IoSession>();

	@Override
	public void messageReceived(IoSession session, Object message) throws Exception {
		String messageStr = message.toString();
		if (messageStr.trim().equalsIgnoreCase("quit")) {
			session.close(true);
			return;
		}
		log.info("server recevie message: {}" + messageStr);
		System.out.println("server recevie message: {}" + messageStr);
		session.write("hi, i am server");
	}

	@Override
	public void sessionClosed(IoSession session) throws Exception {
		log.info("server closed session id: {}", session.getId());
		System.out.println("server closed session id: {}" + session.getId());
		sessionMap.remove(session.getId());
	}

	@Override
	public void sessionOpened(IoSession session) throws Exception {
		log.info("server opened session id: {}", session.getId());
		System.out.println("server opened session id: {}" + session.getId());
		sessionMap.put(session.getId(), session);
	}

}



package com.pingan.mina.client;

import java.net.InetSocketAddress;
import java.nio.charset.Charset;

import org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder;
import org.apache.mina.core.future.CloseFuture;
import org.apache.mina.core.future.ConnectFuture;
import org.apache.mina.core.session.IoSession;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.codec.textline.TextLineCodecFactory;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.transport.socket.SocketConnector;
import org.apache.mina.transport.socket.nio.NioSocketConnector;

import com.pingan.mina.handler.ClientHandler;

public class MinaClient {

	private SocketConnector connector;
	private ConnectFuture future;
	private IoSession session;
	private String host = "127.0.0.1";
	private int port = 8089;

	public boolean connect() {

		connector = new NioSocketConnector();
		DefaultIoFilterChainBuilder chain = connector.getFilterChain();

		chain.addLast("logger", new LoggingFilter());
		chain.addLast("codec", new ProtocolCodecFilter(new TextLineCodecFactory(Charset.forName("UTF-8"))));

		connector.setHandler(new ClientHandler());

		future = connector.connect(new InetSocketAddress(host, port));
		future.awaitUninterruptibly();
		session = future.getSession();
		session.getConfig().setUseReadOperation(true);
		return future.isConnected();
	}

	/**
	 * 往服务器发送消息
	 * 
	 * @param message
	 */
	public void sendMessage(String message) {
		session.write(message);
	}

	/**
	 * 关闭与服务器的连接
	 * 
	 * @return
	 */
	public boolean close() {
		CloseFuture future = session.getCloseFuture();
		future.awaitUninterruptibly(1000);
		connector.dispose();
		return true;
	}

}



package com.pingan.mina.handler;

import org.apache.mina.core.service.IoHandlerAdapter;
import org.apache.mina.core.session.IoSession;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ClientHandler extends IoHandlerAdapter {

	private static final Logger log = LoggerFactory.getLogger(ClientHandler.class);

	@Override
	public void messageReceived(IoSession session, Object message) throws Exception {
		// 从服务器中接收到消息后的处理
		log.info("client receive message: {}" + message.toString());
		System.out.println("client receive message: {}" + message.toString());
	}

	@Override
	public void sessionOpened(IoSession session) throws Exception {
		System.out.println("client opened session id: {}" + session.getId());
		log.info("client opened session id: {}", session.getId());
	}

	@Override
	public void sessionClosed(IoSession session) throws Exception {
		System.out.println("client closed session id: {}" + session.getId());
		log.info("client closed session id: {}", session.getId());
	}

}


package com.pingan.mina.test;

import com.pingan.mina.client.MinaClient;

public class MinaTest {

	public static void main(String[] args) throws Exception {

		MinaClient client = new MinaClient();
		client.connect();
		client.sendMessage("message from cilent");

		client.sendMessage("quit");
		
		client.close();
	}

}



