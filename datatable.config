
function dataTableController($rootScope, $scope, DTOptionsBuilder, DTColumnDefBuilder) {

    var table = this;

    table.tableDtInstance = {};
    table.tableDtOptions = DTOptionsBuilder.newOptions()
        .withLanguageSource('resources/properties/datatable_language.properties')
        .withDisplayLength(10)
        .withOption('aLengthMenu', [10, 20, 30, 50])
        .withOption('bFilter', false)
        .withOption('bSort', false) //排序配置-1
        .withOption('processing', true)
        .withPaginationType('simple_numbers')
        .withOption('serverSide', false)
        .withOption('createdRow', createdRow)
        .withOption('ajax', {
            dataType: 'json',
            url: appResources.DEMISION_TABLE_URLS.TABLE_LIST_SETTING_URL,
            type: 'GET',
            data: function (d) {
                //设置发送给服务器的数据（名称、格式）
                d.pageSize = d.length;
                d.pageNum = d.start / d.length + 1;
                return d;
            },
            dataSrc: function (response) {
                //这是从服务器接受的数据（名称、格式）
                if (response.result && !!response.data) {
                    response.recordsFiltered = response.data.length;
                    response.recordsTotal = response.data.length;
                } else {
                    response.recordsFiltered = 0;
                    response.recordsTotal = 0;
                }
                // 页面数据
                var returnList = [];
                if (0 != response.recordsTotal) {
                    returnList = response.data;
                }
                $scope.$apply();
                return returnList;
            }
        });
    table.tableDtColumns = [
        DTColumnDefBuilder.newColumnDef(0).withTitle("ID").notSortable().renderWith(function (data, type, full) {
            return full.id;
        }),
        DTColumnDefBuilder.newColumnDef(1).withTitle("表名").notSortable().renderWith(function (data, type, full) {
            return full.tableName;
        }),
        DTColumnDefBuilder.newColumnDef(2).withTitle("表注释").notSortable().renderWith(function (data, type, full) {
            return full.tableComment;
        }),
        DTColumnDefBuilder.newColumnDef(3).withTitle("分隔符").notSortable().renderWith(function (data, type, full) {
            if (!!full.delimField && !!table.separateMap[full.delimField]) {
                return table.separateMap[full.delimField];
            }
            if (!!full.delimField) {
                return full.delimField;
            }
            return "";
        }),
        DTColumnDefBuilder.newColumnDef(4).withTitle("SCHEMA").notSortable().renderWith(function (data, type, full) {
            return full.schema;
        }),
        DTColumnDefBuilder.newColumnDef(5).withTitle("描述").notSortable().renderWith(function (data, type, full) {
            return full.memo;
        }),
        DTColumnDefBuilder.newColumnDef(6).withTitle("支持被动").notSortable().renderWith(function (data, type, full) {
            if (full.passive == 1) {
                return '<label class="label label-primary">是</label>';
            }
            return '<label class="label label-warning">否</label>';
        }),
        DTColumnDefBuilder.newColumnDef(7).withTitle("状态").notSortable().renderWith(function (data, type, full) {
            if (full.status == 1) {
                return '<label class="label label-primary">有效</label>';
            } else if (full.status == 0) {
                return '<label class="label label-warning">无效</label>';
            }
            return '<label class="label label-danger">删除</label>';
        }),
        DTColumnDefBuilder.newColumnDef(8).withTitle("更新时间").notSortable().renderWith(function (data, type, full) {
            if (null != full.updateTime) {
                return '<p>' + $filter('date')(full.updateTime, 'yyyy-MM-dd HH:mm:ss') + '</p>';
            }
            if (null != full.createTime) {
                return '<p>' + $filter('date')(full.createTime, 'yyyy-MM-dd HH:mm:ss') + '</p>';
            }
            return '<p>无</p>';
        }),
        DTColumnDefBuilder.newColumnDef(9).withTitle("操作").notSortable().renderWith(function (data, type, full) {
            var disabled = (full.status != 1);
            var returnStr = '<div>' +
                '<button type="button" ng-click="table.updateTable(' + full.id + ')" class="btn btn-primary btn-sm" >编辑</button>&nbsp;' +
                '<button type="button" ng-click="table.deleteTable(' + full.id + ')" class="btn btn-danger btn-sm" >删除</button>&nbsp;' +
                '<button ng-disabled="' + disabled + '" type="button" ng-click="table.createHiveTable(' + full.id + ')" class="btn btn-success btn-sm" >HIVE建表</button>&nbsp;';
            returnStr += '</div>';
            return returnStr;
        })
    ];

    function createdRow(row, data, dataIndex) {
        // Recompiling so we can bind Angular directive to the DT
        $compile(angular.element(row).contents())($scope);
    }
    
}



                            {
                                serie: true,
                                files: ['js/plugins/dataTables/datatables.min.js', 'css/plugins/dataTables/datatables.min.css']
                            },
                            {
                                serie: true,
                                name: 'datatables',
                                files: ['js/plugins/dataTables/angular-datatables.min.js']
                            },
                            {
                                serie: true,
                                name: 'datatables.buttons',
                                files: ['js/plugins/dataTables/angular-datatables.buttons.min.js']
                            }












