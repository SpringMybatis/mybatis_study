<!--开启 cache 缓存-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-cache</artifactId>
		</dependency>
		<!-- ehcache 缓存 -->
		<dependency>
			<groupId>net.sf.ehcache</groupId>
			<artifactId>ehcache</artifactId>
		</dependency>


<?xml version="1.0" encoding="UTF-8"?>
<ehcache xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:noNamespaceSchemaLocation="http://ehcache.org/ehcache.xsd"
         updateCheck="false">
    <defaultCache
            eternal="false"
            maxElementsInMemory="1000"
            overflowToDisk="false"
            diskPersistent="false"
            timeToIdleSeconds="0"
            timeToLiveSeconds="28800"
            memoryStoreEvictionPolicy="LRU"/>

    <cache
            name="userCache"
            eternal="false"
            maxElementsInMemory="1000"
            overflowToDisk="false"
            diskPersistent="false"
            timeToIdleSeconds="0"
            timeToLiveSeconds="28800"
            memoryStoreEvictionPolicy="LRU"/>
</ehcache>



# ehcache
spring.cache.type=ehcache
spring.cache.ehcache.config=ehcache.xml




package com.xgw.wwx;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.servlet.ServletComponentScan;
import org.springframework.cache.annotation.EnableCaching;
import springfox.documentation.swagger2.annotations.EnableSwagger2;

@SpringBootApplication
@ServletComponentScan
@MapperScan("com.xgw.wwx.mapper")
@EnableSwagger2
@EnableCaching
public class WwxApplication {

	public static void main(String[] args) {
		SpringApplication.run(WwxApplication.class, args);
	}
}






package com.xgw.wwx.web.controller;

import com.xgw.wwx.dto.common.CommonResponseDTO;
import com.xgw.wwx.service.CacheService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.UUID;

/**
 * Created by EX-ZHONGJUN001 on 2018/3/8.
 */
@RestController
@RequestMapping("/cache")
public class CacheController {

    private static final Logger logger = LoggerFactory.getLogger(CacheController.class);

    @Autowired
    private CacheService cacheService;

    @GetMapping("/put/{id}")
    public ResponseEntity<CommonResponseDTO<Boolean>> putCache(@PathVariable("id") Long id) {
        String uuid = UUID.randomUUID().toString();
        System.out.println(uuid);
        cacheService.put(id + "", uuid);
        return ResponseEntity.ok(new CommonResponseDTO<Boolean>(Boolean.TRUE));
    }

    @GetMapping("/get/{id}")
    public ResponseEntity<CommonResponseDTO<String>> getCache(@PathVariable("id") Long id) {
        String value = cacheService.get(id + "");
        return ResponseEntity.ok(new CommonResponseDTO<String>(value));
    }

    @GetMapping("/remove/{id}")
    public ResponseEntity<CommonResponseDTO<Boolean>> removeCache(@PathVariable("id") Long id) {
        cacheService.remove("" + id);
        return ResponseEntity.ok(new CommonResponseDTO<Boolean>(Boolean.TRUE));
    }

}


package com.xgw.wwx.service;

/**
 * Created by EX-ZHONGJUN001 on 2018/3/8.
 */
public interface CacheService {
    
    public void put(String key, String value);

    public String get(String key);

    public void remove(String key);

}



package com.xgw.wwx.service.impl;

import com.xgw.wwx.service.CacheService;
import net.sf.ehcache.Cache;
import net.sf.ehcache.CacheManager;
import net.sf.ehcache.Element;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Created by EX-ZHONGJUN001 on 2018/3/8.
 */
@Service
public class CacheServiceImpl implements CacheService {

    @Autowired
    private CacheManager cacheManager;

    @Override
    public void put(String key, String value) {
        Cache userCache = cacheManager.getCache("userCache");
        Element element = new Element(key, value);
        userCache.put(element);
    }

    @Override
    public String get(String key) {
        Cache userCache = cacheManager.getCache("userCache");
        Element element = userCache.get(key);
        if (null == element) {
            return null;
        }
        return (String) element.getObjectValue();
    }

    @Override
    public void remove(String key) {
        Cache userCache = cacheManager.getCache("userCache");
        userCache.remove(key);
    }
}














