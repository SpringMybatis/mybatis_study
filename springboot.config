package com.xgw.wwx.config;

import org.springframework.boot.web.servlet.FilterRegistrationBean;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.cors.CorsConfiguration;
import org.springframework.web.cors.UrlBasedCorsConfigurationSource;
import org.springframework.web.filter.CorsFilter;

/**
 * Created by EX-ZHONGJUN001 on 2018/2/28.
 */
@Configuration
public class CorsConfig {

    @Bean
    public FilterRegistrationBean corsFilter() {
        UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource();
        CorsConfiguration config = new CorsConfiguration();
        config.setAllowCredentials(true);
        config.addAllowedOrigin("*");
        config.addAllowedHeader("*");
        config.addAllowedMethod("*");
        source.registerCorsConfiguration("/**", config);
        FilterRegistrationBean bean = new FilterRegistrationBean(new CorsFilter(source));
        bean.setOrder(0);
        return bean;
    }

}



package com.xgw.wwx.config;

import com.alibaba.druid.pool.DruidDataSource;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;

import javax.sql.DataSource;
import java.sql.SQLException;

/**
 * Created by EX-ZHONGJUN001 on 2018/2/28.
 */
@Configuration
public class DruidDBConfig {

    private Logger logger = LoggerFactory.getLogger(DruidDBConfig.class);

    @Value("${spring.datasource.url}")
    private String dbUrl;

    @Value("${spring.datasource.username}")
    private String username;

    @Value("${spring.datasource.password}")
    private String password;

    @Value("${spring.datasource.driver-class-name}")
    private String driverClassName;

    @Value("${spring.datasource.initialSize}")
    private int initialSize;

    @Value("${spring.datasource.minIdle}")
    private int minIdle;

    @Value("${spring.datasource.maxActive}")
    private int maxActive;

    @Value("${spring.datasource.maxWait}")
    private int maxWait;

    @Value("${spring.datasource.timeBetweenEvictionRunsMillis}")
    private int timeBetweenEvictionRunsMillis;

    @Value("${spring.datasource.minEvictableIdleTimeMillis}")
    private int minEvictableIdleTimeMillis;

    @Value("${spring.datasource.validationQuery}")
    private String validationQuery;

    @Value("${spring.datasource.testWhileIdle}")
    private boolean testWhileIdle;

    @Value("${spring.datasource.testOnBorrow}")
    private boolean testOnBorrow;

    @Value("${spring.datasource.testOnReturn}")
    private boolean testOnReturn;

    @Value("${spring.datasource.poolPreparedStatements}")
    private boolean poolPreparedStatements;

    @Value("${spring.datasource.maxPoolPreparedStatementPerConnectionSize}")
    private int maxPoolPreparedStatementPerConnectionSize;

    @Value("${spring.datasource.filters}")
    private String filters;

    @Value("{spring.datasource.connectionProperties}")
    private String connectionProperties;


    @Bean
    @Primary
    public DataSource dataSource() {
        DruidDataSource datasource = new DruidDataSource();

        datasource.setUrl(this.dbUrl);
        datasource.setUsername(username);
        datasource.setPassword(password);
        datasource.setDriverClassName(driverClassName);

        //configuration
        datasource.setInitialSize(initialSize);
        datasource.setMinIdle(minIdle);
        datasource.setMaxActive(maxActive);
        datasource.setMaxWait(maxWait);
        datasource.setTimeBetweenEvictionRunsMillis(timeBetweenEvictionRunsMillis);
        datasource.setMinEvictableIdleTimeMillis(minEvictableIdleTimeMillis);
        datasource.setValidationQuery(validationQuery);
        datasource.setTestWhileIdle(testWhileIdle);
        datasource.setTestOnBorrow(testOnBorrow);
        datasource.setTestOnReturn(testOnReturn);
        datasource.setPoolPreparedStatements(poolPreparedStatements);
        datasource.setMaxPoolPreparedStatementPerConnectionSize(maxPoolPreparedStatementPerConnectionSize);
        try {
            datasource.setFilters(filters);
        } catch (SQLException e) {
            logger.error("druid configuration initialization filter", e);
        }
        datasource.setConnectionProperties(connectionProperties);

        return datasource;
    }

}

package com.xgw.wwx.constant;

/**
 * Created by EX-ZHONGJUN001 on 2018/2/28.
 */
public class AuthConstant {

    private static final String AUTH_WEB_URL = "http://localhost:8096/auth";
    
}


package com.xgw.wwx.dto.common;

import java.io.Serializable;

public class CommonResponseDTO<T> implements Serializable {

    /**
     *
     */
    private static final long serialVersionUID = -881348333756020210L;

    private boolean result;
    private String code;
    private String message;
    private T data;// 返回的数据对象

    public CommonResponseDTO() {
    }

    public CommonResponseDTO(String code, String message) {
        this.result = false;
        this.code = code;
        this.message = message;
    }

    public CommonResponseDTO(T data) {
        this.result = true;
        this.data = data;
    }

    public CommonResponseDTO(T data, boolean result) {
        this.result = result;
        this.data = data;
    }

    public boolean isResult() {
        return result;
    }

    public void setResult(boolean result) {
        this.result = result;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public T getData() {
        return data;
    }

    public void setData(T data) {
        this.data = data;
    }
}

package com.xgw.wwx.dto;

import java.io.Serializable;

/**
 * Created by EX-ZHONGJUN001 on 2018/2/28.
 */
public class UserDTO implements Serializable{

    private Long id;

    private String userName;

    private String passWord;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getUserName() {
        return userName;
    }

    public void setUserName(String userName) {
        this.userName = userName;
    }

    public String getPassWord() {
        return passWord;
    }

    public void setPassWord(String passWord) {
        this.passWord = passWord;
    }
}

package com.xgw.wwx.exception;

/**
 * Created by EX-ZHONGJUN001 on 2018/2/28.
 */
public class WxxRuntimeException extends RuntimeException {

    private String code;

    private String message;

    private String category;


    public WxxRuntimeException(String code, String message) {
        this.code = code;
        this.message = message;
    }

    public WxxRuntimeException() {

    }

    public WxxRuntimeException(String message) {
        this("SYS_ERROR", message);
    }

    public WxxRuntimeException(String message, Throwable cause) {
        super(message, cause);
    }

    public WxxRuntimeException(String message, String code, String category) {
        this.code = code;
        this.message = message;
        this.category = category;
    }

    public String getCode() {
        return code;
    }

    public void setCode(String code) {
        this.code = code;
    }

    @Override
    public String getMessage() {
        return message;
    }

    public void setMessage(String message) {
        this.message = message;
    }

    public String getCategory() {
        return category;
    }

    public void setCategory(String category) {
        this.category = category;
    }
}

package com.xgw.wwx.filter;

import com.alibaba.druid.support.http.WebStatFilter;

import javax.servlet.annotation.WebFilter;
import javax.servlet.annotation.WebInitParam;

/**
 * Created by EX-ZHONGJUN001 on 2018/2/28.
 */
@WebFilter(
        filterName = "druidWebStatFilter",
        urlPatterns = "/*",
        initParams = {
                @WebInitParam(name = "exclusions", value = "*.js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*")
        }
)
public class DruidStatFilter extends WebStatFilter {


}

package com.xgw.wwx.mapper;

import com.xgw.wwx.dto.UserDTO;

/**
 * Created by EX-ZHONGJUN001 on 2018/2/28.
 */
public interface UserMapper {

    public UserDTO getUserById(Long id);

}


package com.xgw.wwx.service;

import com.xgw.wwx.dto.UserDTO;

/**
 * Created by EX-ZHONGJUN001 on 2018/2/28.
 */
public interface UserService {

    public UserDTO getUserById(Long id);

}



package com.xgw.wwx.service.impl;

import com.xgw.wwx.dto.UserDTO;
import com.xgw.wwx.mapper.UserMapper;
import com.xgw.wwx.service.UserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

/**
 * Created by EX-ZHONGJUN001 on 2018/2/28.
 */
@Service
public class UserServiceImpl implements UserService {

    @Autowired
    private UserMapper userMapper;

    @Override
    public UserDTO getUserById(Long id) {
        return userMapper.getUserById(id);
    }
}


package com.xgw.wwx.servlet;

import com.alibaba.druid.support.http.StatViewServlet;

import javax.servlet.annotation.WebInitParam;
import javax.servlet.annotation.WebServlet;

/**
 * Created by EX-ZHONGJUN001 on 2018/2/28.
 */
@WebServlet(
        urlPatterns = "/druid/*",
        initParams = {
                @WebInitParam(name = "allow", value = ""),// IP白名单(没有配置或者为空，则允许所有访问)
                @WebInitParam(name = "deny", value = ""),// IP黑名单 (存在共同时，deny优先于allow)
                @WebInitParam(name = "loginUsername", value = "root"),// 用户名
                @WebInitParam(name = "loginPassword", value = "123"),// 密码
                @WebInitParam(name = "resetEnable", value = "false")// 禁用HTML页面上的“Reset All”功能
        }
)
public class DruidStatViewServlet extends StatViewServlet {

}

package com.xgw.wwx.util;


import org.apache.commons.lang3.StringUtils;

/**
 * 数据库查询工具
 * 
 * 
 * @author EX-ZHONGJUN001
 *
 */
public class MySqlUtil {

    /**
     * 处理模糊查询特殊字符
     * 
     * 
     * @param likeChar
     * @return
     */
    public static String replaceSpecialChar4Like(String likeChar) {
        String newStr = "";
        if (StringUtils.isNotBlank(likeChar)) {
            String[] strArr = likeChar.split("");
            for (String s : strArr) {
                if (s.equals("%")) {
                    s = s.replace("%", "\\%");
                }
                if (s.equals("\\")) {
                    s = s.replace("\\", "\\\\\\\\");
                }
                if (s.equals("_")) {
                    s = s.replace("_", "\\_");
                }
                if (s.equals("\'")) {
                    s = s.replace("\'", "\\'");
                }
                newStr = newStr + s;
            }
        }
        return newStr;
    }

}

package com.xgw.wwx.web.controller.base;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import java.util.HashMap;
import java.util.Map;

/**
 * Created by EX-ZHONGJUN001 on 2018/2/28.
 */
public class GlobalExceptionHandler extends ResponseEntityExceptionHandler {

    @Override
    protected ResponseEntity<Object> handleExceptionInternal(Exception ex, Object body, HttpHeaders headers, HttpStatus status, WebRequest request) {
        Map<String, Object> exceptionMap = new HashMap<String, Object>();
        exceptionMap.put("result", false);
        exceptionMap.put("category", "GlobalExceptionHandler");
        return ResponseEntity.status(status).body(exceptionMap);
    }

}

package com.xgw.wwx.web.controller;

import com.xgw.wwx.dto.UserDTO;
import com.xgw.wwx.dto.common.CommonResponseDTO;
import com.xgw.wwx.service.UserService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

/**
 * Created by EX-ZHONGJUN001 on 2018/2/28.
 */
@RestController
@RequestMapping("/user")
public class UserController {


    private static final Logger logger = LoggerFactory.getLogger(UserController.class);

    @Autowired
    private UserService userService;

    @GetMapping("/{id}")
    public ResponseEntity<CommonResponseDTO<UserDTO>> getUserById(@PathVariable("id") Long id) {

        logger.info("-- info message, id={} --",id);
        logger.debug("-- debug message, id={} --",id);
        logger.error("-- error message, id={} --",id);

        UserDTO userDTO = userService.getUserById(id);
        return ResponseEntity.ok(new CommonResponseDTO<UserDTO>(userDTO));
    }

}


package com.xgw.wwx;

import org.mybatis.spring.annotation.MapperScan;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.web.servlet.ServletComponentScan;

@SpringBootApplication
@ServletComponentScan
@MapperScan("com.xgw.wwx.mapper")
public class WwxApplication {

    public static void main(String[] args) {
        SpringApplication.run(WwxApplication.class, args);
    }
}

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xgw.wwx.mapper.UserMapper">

    <select id="getUserById" parameterType="Long" resultType="UserDTO">
        SELECT `id` as id, `user_name` as userName, `password` as passWord FROM t_auth_user where id = #{id,jdbcType=BIGINT}
    </select>

</mapper>


<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <settings>
        <setting name="callSettersOnNulls" value="true"/>
        <!-- <setting name="logImpl" value="STDOUT_LOGGING" /> -->
    </settings>

    <plugins>
        <plugin interceptor="com.github.pagehelper.PageInterceptor">
            <property name="offsetAsPageNum" value="false"/>
            <property name="rowBoundsWithCount" value="false"/>
            <property name="pageSizeZero" value="true"/>
            <property name="reasonable" value="false"/>
            <property name="supportMethodsArguments" value="false"/>
            <property name="returnPageInfo" value="none"/>
        </plugin>
    </plugins>

</configuration>



# server
server.context-path=/wwx
server.port=8090

# log4j2
logging.config=classpath:log4j2.xml

# http encoding
spring.http.encoding.charset=utf-8
spring.http.encoding.force=true
spring.http.encoding.enabled=true

# mysql
spring.datasource.username=
spring.datasource.password=
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:useSSL=false

# mybatis
mybatis.config-location=classpath:mybatis/mybatis-config.xml
mybatis.mapper-locations=classpath:mapper/*.xml
mybatis.type-aliases-package=com.xgw.wwx.dto

# druid
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
spring.datasource.maxWait=60000
spring.datasource.timeBetweenEvictionRunsMillis=60000
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
spring.datasource.poolPreparedStatements=true
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
spring.datasource.filters=stat,wall,log4j
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000



<?xml version="1.0" encoding="UTF-8"?>
<!--设置log4j2的自身log级别为warn-->
<configuration status="warn">

    <appenders>
        <console name="Console" target="SYSTEM_OUT">
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
        </console>

        <RollingFile name="RollingFileInfo" fileName="/logs/info.log" filePattern="logs/**%d{yyyy-MM-dd_HH}**_info_%i.log">
            <Filters>
                <ThresholdFilter level="INFO"/>
                <ThresholdFilter level="WARN" onMatch="DENY" onMismatch="NEUTRAL"/>
            </Filters>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="250 MB"/>
            </Policies>
            <DefaultRolloverStrategy fileIndex="max"/>
        </RollingFile>

        <RollingFile name="RollingFileDebug" fileName="/logs/debug.log" filePattern="logs/**%d{yyyy-MM-dd_HH}**_debug_%i.log">
            <ThresholdFilter level="DEBUG"/>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="250 MB"/>
            </Policies>
            <DefaultRolloverStrategy fileIndex="max"/>
        </RollingFile>

        <RollingFile name="RollingFileError" fileName="/logs/error.log" filePattern="logs/**%d{yyyy-MM-dd_HH}**_error_%i.log">
            <ThresholdFilter level="ERROR"/>
            <PatternLayout pattern="[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="250 MB"/>
            </Policies>
            <DefaultRolloverStrategy fileIndex="max"/>
        </RollingFile>

    </appenders>

    <loggers>
        <!--过滤掉spring一些无用的debug信息-->
        <logger name="org.springframework" level="INFO"></logger>
        <root level="all">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileDebug"/>
            <appender-ref ref="RollingFileError"/>
        </root>
    </loggers>

</configuration>



package com.xgw.wwx.web.controller;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.restdocs.AutoConfigureRestDocs;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.ResultMatcher;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.result.MockMvcResultHandlers;

import static org.springframework.restdocs.mockmvc.MockMvcRestDocumentation.document;
import static org.springframework.test.web.client.match.MockRestRequestMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

/**
 * Created by EX-ZHONGJUN001 on 2018/2/28.
 */
@RunWith(SpringRunner.class)
@WebMvcTest(UserController.class)
@AutoConfigureRestDocs(outputDir = "target/snippets")
public class UserControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Test
    public void shouldReturnDefaultMessage() throws Exception {
        this.mockMvc
                .perform(MockMvcRequestBuilders.get("/user/1"))
                .andDo(MockMvcResultHandlers.print())
                .andExpect(status().isOk())
                .andExpect((ResultMatcher) content().string("result"))
                .andDo(document("user"));
    }

}


